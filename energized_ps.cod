//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer ConstantBuffer
// {
//
//   row_major float4x4 WorldViewProjection;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 World;          // Offset:   64 Size:    64 [unused]
//   float4x4 View;                     // Offset:  128 Size:    64 [unused]
//   float4x4 Projection;               // Offset:  192 Size:    64 [unused]
//   float4 Light[16];                  // Offset:  256 Size:   256
//   float4 Attenuation[16];            // Offset:  512 Size:   256
//   float4 LightColor[16];             // Offset:  768 Size:   256 [unused]
//   float4 ObjColor;                   // Offset: 1024 Size:    16
//   float4 DirectionalLight;           // Offset: 1040 Size:    16
//   int4 LightExist[16];               // Offset: 1056 Size:   256
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ConstantBuffer                    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0            16         8  ( FLT, FLT, FLT, FLT)
// c8         cb0            32         2  ( FLT, FLT, FLT, FLT)
// c10        cb0            64         2  ( FLT, FLT, FLT, FLT)
// c12        cb0            66         7  ( INT, INT, INT, INT)
//
//
// Level9 shader bytecode:
//
    ps_2_x
    def c19, 0, 1, 0, 0
    dcl t0
    dcl t1
    dp4 r0.w, -c11, -c11
    rsq r0.x, r0.w
    mul r0.xyz, r0.x, -c11
    dp3 r0.x, r0, t1
    mul r0.yzw, r0.x, c10.xxyz
    cmp r0.xyz, r0.x, r0.yzww, c19.x
    mul r0.w, c12.x, c12.x
    mov r1.xyz, c1
    cmp r2.xyz, -r0.w, r1, c0
    add r2.xyz, r2, -t0
    dp3 r1.w, r2, r2
    rsq r1.w, r1.w
    rcp r2.w, r1.w
    mul r2.xyz, r1.w, r2
    mad r1.w, c8.y, r2.w, c8.x
    mul r3.w, r2.w, r2.w
    mad r2.w, c9.y, r2.w, c9.x
    mad r2.w, r3.w, c9.z, r2.w
    mad r1.w, r3.w, c8.z, r1.w
    rcp_sat r1.w, r1.w
    rcp_sat r2.w, r2.w
    cmp r1.w, -r0.w, r2.w, r1.w
    nrm r3.xyz, t1
    dp3_sat r3.w, r3, r2
    mul r2.xyz, r3.w, c10
    mad r2.xyz, r2, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r2
    mul r0.w, c13.x, c13.x
    cmp r1.xyz, -r0.w, c2, r1
    add r1.xyz, r1, -t0
    dp3 r1.w, r1, r1
    rsq r1.w, r1.w
    rcp r3.w, r1.w
    mul r1.xyz, r1.w, r1
    dp3_sat r1.x, r3, r1
    mul r1.xyz, r1.x, c10
    mad r1.w, c9.y, r3.w, c9.x
    mul r3.w, r3.w, r3.w
    mad r1.w, r3.w, c9.z, r1.w
    rcp_sat r1.w, r1.w
    mad r1.xyz, r1, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r1
    mul r0.w, c14.x, c14.x
    mov r1.xyz, c3
    cmp r2.xyz, -r0.w, r1, c2
    add r2.xyz, r2, -t0
    dp3 r1.w, r2, r2
    rsq r1.w, r1.w
    rcp r2.w, r1.w
    mul r2.xyz, r1.w, r2
    dp3_sat r1.w, r3, r2
    mul r2.xyz, r1.w, c10
    mad r1.w, c9.y, r2.w, c9.x
    mul r2.w, r2.w, r2.w
    mad r1.w, r2.w, c9.z, r1.w
    rcp_sat r1.w, r1.w
    mad r2.xyz, r2, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r2
    mul r0.w, c15.x, c15.x
    cmp r1.xyz, -r0.w, c4, r1
    add r1.xyz, r1, -t0
    dp3 r1.w, r1, r1
    rsq r1.w, r1.w
    rcp r3.w, r1.w
    mul r1.xyz, r1.w, r1
    dp3_sat r1.x, r3, r1
    mul r1.xyz, r1.x, c10
    mad r1.w, c9.y, r3.w, c9.x
    mul r3.w, r3.w, r3.w
    mad r1.w, r3.w, c9.z, r1.w
    rcp_sat r1.w, r1.w
    mad r1.xyz, r1, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r1
    mul r0.w, c16.x, c16.x
    mov r1.xyz, c5
    cmp r2.xyz, -r0.w, r1, c4
    add r2.xyz, r2, -t0
    dp3 r1.w, r2, r2
    rsq r1.w, r1.w
    rcp r2.w, r1.w
    mul r2.xyz, r1.w, r2
    dp3_sat r1.w, r3, r2
    mul r2.xyz, r1.w, c10
    mad r1.w, c9.y, r2.w, c9.x
    mul r2.w, r2.w, r2.w
    mad r1.w, r2.w, c9.z, r1.w
    rcp_sat r1.w, r1.w
    mad r2.xyz, r2, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r2
    mul r0.w, c17.x, c17.x
    cmp r1.xyz, -r0.w, c6, r1
    add r1.xyz, r1, -t0
    dp3 r1.w, r1, r1
    rsq r1.w, r1.w
    rcp r3.w, r1.w
    mul r1.xyz, r1.w, r1
    dp3_sat r1.x, r3, r1
    mul r1.xyz, r1.x, c10
    mad r1.w, c9.y, r3.w, c9.x
    mul r3.w, r3.w, r3.w
    mad r1.w, r3.w, c9.z, r1.w
    rcp_sat r1.w, r1.w
    mad r1.xyz, r1, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r1
    mul r0.w, c18.x, c18.x
    mov r1.xyz, c6
    cmp r1.xyz, -r0.w, c7, r1
    add r1.xyz, r1, -t0
    dp3 r1.w, r1, r1
    rsq r1.w, r1.w
    rcp r3.w, r1.w
    mul r1.xyz, r1.w, r1
    dp3_sat r1.x, r3, r1
    mul r1.xyz, r1.x, c10
    mad r1.w, c9.y, r3.w, c9.x
    mul r2.x, r3.w, r3.w
    mad r1.w, r2.x, c9.z, r1.w
    rcp_sat r1.w, r1.w
    mad r1.xyz, r1, r1.w, r0
    cmp r0.xyz, -r0.w, r0, r1
    mov r0.w, c19.y
    mov oC0, r0

// approximately 124 instruction slots used
ps_4_0
dcl_constantbuffer cb0[74], dynamicIndexed
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 4
dp4 r0.x, -cb0[65].xyzw, -cb0[65].xyzw
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, -cb0[65].xyzx
dp3 r0.x, r0.xyzx, v2.xyzx
max r0.x, r0.x, l(0.000000)
mul r0.xyz, r0.xxxx, cb0[64].xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v2.xyzx
mov r2.xyz, r0.xyzx
mov r0.w, l(0)
loop 
  ige r1.w, r0.w, l(7)
  breakc_nz r1.w
  if_z cb0[r0.w + 66].x
    iadd r1.w, r0.w, l(1)
    mov r0.w, r1.w
    continue 
  endif 
  add r3.xyz, -v1.xyzx, cb0[r0.w + 16].xyzx
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r2.w, r1.w
  div r3.xyz, r3.xyzx, r2.wwww
  dp3_sat r3.x, r1.xyzx, r3.xyzx
  mad r3.y, cb0[32].y, r2.w, cb0[32].x
  mad r3.y, r1.w, cb0[32].z, r3.y
  div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), r3.y
  mov_sat r3.y, r3.y
  mad r2.w, cb0[33].y, r2.w, cb0[33].x
  mad r1.w, r1.w, cb0[33].z, r2.w
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mov_sat r1.w, r1.w
  movc r1.w, r0.w, r1.w, r3.y
  mul r3.xyz, r3.xxxx, cb0[64].xyzx
  mad r2.xyz, r3.xyzx, r1.wwww, r2.xyzx
  iadd r0.w, r0.w, l(1)
endloop 
mov o0.xyz, r2.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 40 instruction slots used
